//Chester Grudzinski
//Programming fund. II
//04-15-20
//Dr. Tyson McMillan



//Dr_T helping students get started on Unit 4 scoreboard
//Using object oriented coding for a scoreboard:  Basketball
//classes Team, Scoreboard //PRIVATE TEAM class members
#include <iostream>
#include <unistd.h> //for sleep command
#include <string>
#include <iomanip> //for setw
using namespace std; 

class Team
{
  private: 

    int score; 
    string name; 
    string Coach_Name;
    string Home_City; 
    bool Home_Status;
    int TimeoutC;
  public: 
    Team()//default constructor  
    {
      score = 0;
      name = "DefaultName";
      Coach_Name = "Coach's Name";
      Home_City = "Home City";
      
    }  
    void setScore(int s) { score = s; }
    void setCoach_Name(string cn) { Coach_Name = cn; }
    void setHome_City(string hc) { Home_City = hc; }
    void setHome_Status(bool stat) { Home_Status = stat; }
    void setTimeoutC(int C) { TimeoutC = C; }
    void setName(string n) { name = n; }
   
    double getScore() const { return score; }
    string setCoach_Name() const { return Coach_Name; }
    string setHome_City() const { return Home_City; }
    bool setHome_Status() const { return Home_Status; }
    int setTimeoutC() const { return TimeoutC;}
    string getName() const { return name; }
    
};

class Scoreboard
{
  private: 
    bool poss; //true = home, false = visitor 
    Team team1; //double dot notation to get its data
    Team team2; //double dot notation to get its data
    int Quarter;
    int Down;
    int ToGo;
    int minutes;
    int seconds;
  public:
    Scoreboard() //default constructor 
    {
      poss = true; //home team has the ball intially 
      minutes = 11;
      seconds = 59; 
      Quarter = 1;
      Down = 1;
      ToGo = 0;
    }  
    void setPoss(bool po) { poss = po; }
    void setQuarter(int q) { Quarter = q; }
    void setDown(int d) { Down = d; }
    void setToGo(int go) { ToGo = go; }
    void setTeam1(Team t1) { team1 = t1; } //remember when the object changes
    void setTeam2(Team t2) {team2 = t2; } //remember when the object changes
    void setMinutes(int m) { minutes = m; }
    void setSeconds(int s) { seconds = s; }


    int getQuarter() const { return Quarter; }
    int setToGo() const { return ToGo; }
    int getDown() const { return Down; }
    bool getPoss() const { return poss; }
    Team getTeam1() const { return team1; }
    Team getTeam2()  const { return team2; }
    int getMinutes() const { return minutes; }
    int getSeconds() const { return seconds; }
    void showScoreboard()
    { 
      string color = ""; 
      string reset = "\x1b[0m";
        
        system("clear"); //clear the screen 
        
        //Show Scoreboard
        color = "\x1b[32;1m"; //green 
        cout << color << "\t\tFootBall Scoreboard\n"<< reset;
        for(int i = 0; i < 45; i++) { cout << "*"; }
        cout << endl; 
        cout << "     (H)\t\t\t\t\t\t(V)" << endl; 
        cout << setw(10) << team1.getName() << "\t\t\t\t" << setw(10) << team2.getName()<< endl;
        color = "\x1b[91;1m"; //red 
        cout << color << setw(7) << team1.getScore() << "\t\t\t\t\t\t" << setw(7) <<  team2.getScore() << reset << endl;
        cout << "QTR: " << Quarter << endl; 
        cout << "Down: " << Down << endl;
        cout << "To Go: " << ToGo << endl;

        //dealing with Boolean data
        if(poss == true)
        {
          cout << "<>" << endl; 
        }
        else
        {
          cout << "                     <>" << endl; 
        }
      for(int i = 0; i < 45; i++) { cout << "*"; }
    }
};

 //A void function to instantiate and control scoreboard data 





void scoreboardControls()
{
  Scoreboard s; //instantiate the the scoreboard object s
  Team tOneMain; //team Object that will become a member of scoreboard S
  Team tTwoMain; //team Object that will become a member of scoreboard S
  char decision = '\0';
  int newScore = 0; 
  string newName = ""; 
  int newQuarter = 0;
  int newDown = 0;
  string cow = "Cowboys";

  s.setTeam1(tOneMain); // placed update Team1 object in s
  s.setTeam1(tTwoMain); // placed update Team2 object in s

  //Access the data outside of the class 
  /*cout << "\n Period here " << s.getPeriod() << endl; 
  cout << "\n Team 1 intial name: " << s.getTeam1().getName() << endl; 
  */
  //work with the scoreboard and menu 
  do
  {

        //show the scoreboard and clear the screen each time 
        s.showScoreboard();
       
       //Menu options for the user 
        cout << "\nMenu: " << endl; 
        cout << "A. Update Team 1 Score" << endl; 
        cout << "B. Update Team 1 Name" << endl; 
        cout << "C. Update Team 2 Score" << endl; 
        cout << "D. Update Team 2 Name" << endl; 
        cout << "E. Update Quarter" << endl; 
        cout << "F. Update Down" << endl;         
        cout << "G. Instance for teams" << endl; 

        cout << "X. To Exit" << endl; 
        cin >> decision; 

        if(decision == 'a' || decision == 'A')
        {
          cout << "Team 1 score update. \n";
          cout << "What is the new score? > ";
          cin >> newScore; 
          tOneMain.setScore(newScore);
          cout << "\nUpdating new score for Team1 to..." << tOneMain.getScore() << endl;   
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'b' || decision == 'B')
        {
          cout << "Team 1 NAME update. \n";
          cout << "What is the new Name? > ";
          cin >> newName; 
          tOneMain.setName(newName);
          cout << "\nUpdating new name for Team1 to..." << tOneMain.getName() << endl;
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'c' || decision == 'C')
        {
          cout << "Team 1 score update. \n";
          cout << "What is the new score? > ";
          cin >> newScore; 
          tTwoMain.setScore(newScore);
          cout << "\nUpdating new score for Team1 to..." << tTwoMain.getScore() << endl;   
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'd' || decision == 'D')
        {
          cout << "Team 2 NAME update. \n";
          cout << "What is the new Name? > ";
          cin >> newName; 
          tTwoMain.setName(newName);
          cout << "\nUpdating new name for Team1 to..." << tTwoMain.getName() << endl;
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'e' || decision == 'E')
        {
          cout << "Quarter Update. \n";
          cout << "What is the Quarter? > ";
          cin >> newQuarter; 
          s.setQuarter(newQuarter);
          cout << "\nUpdating new name for Team1 to..." << s.getQuarter() << endl;
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'f' || decision == 'F')
        {
          cout << "Down Update. \n";
          cout << "What is the Down? > ";
          cin >> newDown; 
          s.setDown(newDown);
          cout << "\nUpdating new name for Team1 to..." << s.getDown() << endl;
          sleep(3); //pause 3 seconds. 
          
        }
         else if(decision == 'g' || decision == 'G')
        {
          

            newName = "Mavricks";
          tOneMain.setName(newName);
          newName = "Cowboys";
          cout << tOneMain.getName() << endl;


          tTwoMain.setName(newName);
          cout << "\nUpdating new name for Team 1 to... " << tOneMain.getName() << " and team 2 to... " << tTwoMain.getName() << endl;
          sleep(3); //pause 3 seconds. 
          
        }
        else if(decision == 'x' || decision == 'X')
        {
          cout << "\nEXIT. Go Mavs!!!" << endl; 
        }

        s.setTeam1(tOneMain); //setTeam1 to the latest data 
        s.setTeam2(tTwoMain); //setTeam2 to the latest data 
      
  }while(decision != 'x' && decision != 'X');     


}



int main() 
{
   scoreboardControls(); //run the scoreboard processes and menus

  return 0; 
}
